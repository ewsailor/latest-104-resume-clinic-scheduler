name: 測試專用工作流程

on:
  push:
    branches: [main, develop]
    paths:
      - "app/**"
      - "tests/**"
      - "pyproject.toml"
      - "poetry.lock"
  pull_request:
    branches: [main, develop]
    paths:
      - "app/**"
      - "tests/**"
      - "pyproject.toml"
      - "poetry.lock"

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # 快速測試檢查
  quick-test:
    name: 快速測試
    runs-on: ubuntu-latest

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 安裝 Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 安裝依賴
        run: |
          poetry install --no-interaction --no-root

      - name: 運行單元測試
        run: |
          poetry run pytest tests/unit/ -v --tb=short

      - name: 運行整合測試
        run: |
          poetry run pytest tests/integration/ -v --tb=short

  # 完整測試套件
  full-test:
    name: 完整測試套件
    runs-on: ubuntu-latest
    needs: [quick-test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    strategy:
      matrix:
        test-type: ["unit", "integration", "e2e"]

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 安裝 Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 安裝依賴
        run: |
          poetry install --no-interaction --no-root

      - name: 運行 ${{ matrix.test-type }} 測試
        run: |
          poetry run pytest tests/${{ matrix.test-type }}/ -v --cov=app --cov-report=xml --cov-report=html

      - name: 上傳測試覆蓋率報告
        uses: codecov/codecov-action@v3
        if: matrix.test-type == 'unit'
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-type }}
          name: codecov-${{ matrix.test-type }}
          fail_ci_if_error: false

  # 測試結果報告
  test-report:
    name: 測試結果報告
    runs-on: ubuntu-latest
    needs: [full-test]
    if: always()

    steps:
      - name: 生成測試報告
        run: |
          echo "測試結果摘要："
          echo "- 快速測試: ${{ needs.quick-test.result }}"
          echo "- 完整測試: ${{ needs.full-test.result }}"

      - name: 上傳測試結果
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            htmlcov/
            coverage.xml
