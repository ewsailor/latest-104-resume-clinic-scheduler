"""新增giver_id和taker_id的外鍵約束

Revision ID: 5ddd0e85e3a2
Revises: 1b8e77816819
Create Date: 2025-08-09 16:52:41.508635

"""

from typing import Sequence, Union

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '5ddd0e85e3a2'
down_revision: Union[str, Sequence[str], None] = '1b8e77816819'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # 檢查是否為 offline 模式
    from alembic import context

    if context.is_offline_mode():
        # 在 offline 模式下，新增所有外鍵約束
        op.create_foreign_key(
            'fk_schedules_updated_by',
            'schedules',
            'users',
            ['updated_by'],
            ['id'],
            ondelete='SET NULL',
        )
    else:
        # 在 online 模式下，檢查外鍵約束是否存在
        from sqlalchemy import text

        connection = context.get_context().bind

        # 檢查 schedules.updated_by 的外鍵約束是否存在
        result = connection.execute(
            text(
                """
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
            WHERE TABLE_SCHEMA = 'scheduler_db'
            AND TABLE_NAME = 'schedules'
            AND COLUMN_NAME = 'updated_by'
            AND REFERENCED_TABLE_NAME IS NOT NULL
        """
            )
        ).scalar()

        if result == 0:
            op.create_foreign_key(
                'fk_schedules_updated_by',
                'schedules',
                'users',
                ['updated_by'],
                ['id'],
                ondelete='SET NULL',
            )

    # 新增 giver_id 外鍵約束
    op.create_foreign_key(
        'fk_schedules_giver_id', 'schedules', 'users', ['giver_id'], ['id']
    )

    # 新增 taker_id 外鍵約束
    op.create_foreign_key(
        'fk_schedules_taker_id',
        'schedules',
        'users',
        ['taker_id'],
        ['id'],
        ondelete='SET NULL',
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # 刪除外鍵約束
    op.drop_constraint('fk_schedules_taker_id', 'schedules', type_='foreignkey')
    op.drop_constraint('fk_schedules_giver_id', 'schedules', type_='foreignkey')

    # 檢查是否為 offline 模式
    from alembic import context

    if context.is_offline_mode():
        # 在 offline 模式下，直接刪除外鍵約束
        op.drop_constraint('fk_schedules_updated_by', 'schedules', type_='foreignkey')
    else:
        # 在 online 模式下，檢查外鍵約束是否存在
        from sqlalchemy import text

        connection = context.get_context().bind
        result = connection.execute(
            text(
                """
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
            WHERE TABLE_SCHEMA = 'scheduler_db'
            AND TABLE_NAME = 'schedules'
            AND COLUMN_NAME = 'updated_by'
            AND REFERENCED_TABLE_NAME IS NOT NULL
        """
            )
        ).scalar()

        if result > 0:
            op.drop_constraint(
                'fk_schedules_updated_by', 'schedules', type_='foreignkey'
            )
    # ### end Alembic commands ###
