"""新增updated_by欄位_使用正確的INT_UNSIGNED型別

Revision ID: 1b8e77816819
Revises: 040fda16b06b
Create Date: 2025-08-09 16:28:42.089378

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import mysql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = '1b8e77816819'
down_revision: Union[str, Sequence[str], None] = '040fda16b06b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # schedules 表格的 updated_by 欄位已經存在，只處理 users 表格

    # 檢查是否為 offline 模式
    from alembic import context

    if context.is_offline_mode():
        # 在 offline 模式下，假設需要新增所有欄位
        op.add_column(
            'schedules',
            sa.Column(
                'updated_by',
                mysql.INTEGER(unsigned=True),
                nullable=True,
                comment='最後更新者的使用者 ID，可為 NULL（表示系統自動更新）',
            ),
        )
        op.create_foreign_key(
            'fk_schedules_updated_by',
            'schedules',
            'users',
            ['updated_by'],
            ['id'],
            ondelete='SET NULL',
        )
    else:
        # 在 online 模式下，檢查欄位是否存在
        from sqlalchemy import text

        connection = context.get_context().bind
        result = connection.execute(
            text(
                """
            SELECT COUNT(*)
            FROM INFORMATION_SCHEMA.COLUMNS
            WHERE TABLE_SCHEMA = 'scheduler_db'
            AND TABLE_NAME = 'schedules'
            AND COLUMN_NAME = 'updated_by'
        """
            )
        ).scalar()

        if result == 0:
            # schedules 表格沒有 updated_by 欄位，新增它
            op.add_column(
                'schedules',
                sa.Column(
                    'updated_by',
                    mysql.INTEGER(unsigned=True),
                    nullable=True,
                    comment='最後更新者的使用者 ID，可為 NULL（表示系統自動更新）',
                ),
            )
            op.create_foreign_key(
                'fk_schedules_updated_by',
                'schedules',
                'users',
                ['updated_by'],
                ['id'],
                ondelete='SET NULL',
            )

    # 新增 users 表格的 updated_by 欄位
    op.add_column(
        'users',
        sa.Column(
            'updated_by',
            mysql.INTEGER(unsigned=True),
            nullable=True,
            comment='最後更新者的使用者 ID，可為 NULL（表示系統自動更新）',
        ),
    )
    # 建立 users 的外鍵約束
    op.create_foreign_key(
        'fk_users_updated_by',
        'users',
        'users',
        ['updated_by'],
        ['id'],
        ondelete='SET NULL',
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # 先刪除外鍵約束，再刪除欄位
    op.drop_constraint('fk_users_updated_by', 'users', type_='foreignkey')
    op.drop_column('users', 'updated_by')

    # 檢查 schedules.updated_by 是否存在，存在才刪除
    from sqlalchemy import text

    from alembic import context

    connection = context.get_context().bind
    result = connection.execute(
        text(
            """
        SELECT COUNT(*)
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = 'scheduler_db'
        AND TABLE_NAME = 'schedules'
        AND COLUMN_NAME = 'updated_by'
    """
        )
    ).scalar()

    if result > 0:
        op.drop_constraint('fk_schedules_updated_by', 'schedules', type_='foreignkey')
        op.drop_column('schedules', 'updated_by')
    # ### end Alembic commands ###
