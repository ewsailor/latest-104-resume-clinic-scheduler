{
  "info": {
    "name": "104 Resume Clinic API",
    "description": "104 履歷診療室排程系統 API 測試集合",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000"
    },
    {
      "key": "test_giver_id",
      "value": "1"
    },
    {
      "key": "test_user_id",
      "value": "1"
    },
    {
      "key": "test_schedule_id",
      "value": "1"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Health Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Schedules",
      "item": [
        {
          "name": "Create Schedule",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"schedules\": [\n    {\n      \"giver_id\": 1,\n      \"date\": \"2024-01-20\",\n      \"start_time\": \"09:00:00\",\n      \"end_time\": \"10:00:00\",\n      \"status\": \"AVAILABLE\"\n    }\n  ],\n  \"updated_by\": 1,\n  \"updated_by_role\": \"GIVER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/schedules",
              "host": ["{{base_url}}"],
              "path": ["api", "schedules"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// 生成明天的日期",
                  "const tomorrow = new Date();",
                  "tomorrow.setDate(tomorrow.getDate() + 1);",
                  "const dateStr = tomorrow.toISOString().split('T')[0];",
                  "",
                  "// 設定環境變數",
                  "pm.environment.set(\"test_date\", dateStr);",
                  "pm.environment.set(\"test_giver_id\", \"1\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('giver_id');",
                  "        pm.expect(jsonData[0]).to.have.property('date');",
                  "        pm.expect(jsonData[0]).to.have.property('status');",
                  "    }",
                  "});",
                  "",
                  "// 儲存回應資料供後續使用",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData && jsonData.length > 0) {",
                  "        pm.environment.set(\"created_schedule_id\", jsonData[0].id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Schedules",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/schedules?giver_id={{test_giver_id}}&status_filter=AVAILABLE&page=1&size=5",
              "host": ["{{base_url}}"],
              "path": ["api", "schedules"],
              "query": [
                {
                  "key": "giver_id",
                  "value": "{{test_giver_id}}"
                },
                {
                  "key": "status_filter",
                  "value": "AVAILABLE"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "5"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Schedule by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/schedules/{{test_schedule_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "schedules", "{{test_schedule_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('giver_id');",
                  "    pm.expect(jsonData).to.have.property('date');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Schedule",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"schedule_data\": {\n    \"giver_id\": 1,\n    \"date\": \"2024-01-21\",\n    \"start_time\": \"10:00:00\",\n    \"end_time\": \"11:00:00\",\n    \"status\": \"BOOKED\"\n  },\n  \"updated_by\": 1,\n  \"updated_by_role\": \"GIVER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/schedules/{{test_schedule_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "schedules", "{{test_schedule_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Schedule updated successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql(\"BOOKED\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Schedule",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"updated_by\": 1,\n  \"updated_by_role\": \"GIVER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/schedules/{{test_schedule_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "schedules", "{{test_schedule_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Schedule deleted successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include(\"刪除成功\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Givers",
      "item": [
        {
          "name": "Get All Givers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/givers?page=1&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "givers"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Giver by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/givers/{{test_giver_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "givers", "{{test_giver_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('company');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Givers by Topic",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/givers/topics/履歷健診",
              "host": ["{{base_url}}"],
              "path": ["api", "givers", "topics", "履歷健診"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All givers have the specified topic\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.forEach(giver => {",
                  "        pm.expect(giver.giverCard__topic).to.include(\"履歷健診\");",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Givers by Industry",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/givers/industries/電子資訊／軟體／半導體相關業",
              "host": ["{{base_url}}"],
              "path": [
                "api",
                "givers",
                "industries",
                "電子資訊／軟體／半導體相關業"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All givers have the specified industry\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.forEach(giver => {",
                  "        pm.expect(giver.industry).to.eql(\"電子資訊／軟體／半導體相關業\");",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Giver Stats",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/givers/stats/count",
              "host": ["{{base_url}}"],
              "path": ["api", "givers", "stats", "count"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has count property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('count');",
                  "    pm.expect(jsonData.count).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users?page=1&size=10",
              "host": ["{{base_url}}"],
              "path": ["api", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{test_user_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"測試使用者\",\n  \"email\": \"test@example.com\",\n  \"phone\": \"0912345678\",\n  \"role\": \"TAKER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"User created successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.name).to.eql(\"測試使用者\");",
                  "    pm.expect(jsonData.email).to.eql(\"test@example.com\");",
                  "    pm.expect(jsonData.role).to.eql(\"TAKER\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"更新後的使用者名稱\",\n  \"email\": \"updated@example.com\",\n  \"phone\": \"0987654321\",\n  \"role\": \"TAKER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{test_user_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User updated successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql(\"更新後的使用者名稱\");",
                  "    pm.expect(jsonData.email).to.eql(\"updated@example.com\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/users/{{test_user_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "{{test_user_id}}"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User deleted successfully\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include(\"刪除成功\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Validation Error - Invalid Schedule",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"schedules\": [\n    {\n      \"giver_id\": \"invalid\",\n      \"date\": \"invalid-date\",\n      \"start_time\": \"25:00:00\",\n      \"end_time\": \"10:00:00\",\n      \"status\": \"INVALID_STATUS\"\n    }\n  ],\n  \"updated_by\": 1,\n  \"updated_by_role\": \"GIVER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/schedules",
              "host": ["{{base_url}}"],
              "path": ["api", "schedules"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 422\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Not Found Error - Schedule",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/v1/schedules/999",
              "host": ["{{base_url}}"],
              "path": ["api", "schedules", "999"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message contains expected text\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include(\"時段不存在\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Business Logic Error - Overlapping Schedule",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"schedules\": [\n    {\n      \"giver_id\": 1,\n      \"date\": \"2024-01-20\",\n      \"start_time\": \"09:00:00\",\n      \"end_time\": \"10:00:00\",\n      \"status\": \"AVAILABLE\"\n    },\n    {\n      \"giver_id\": 1,\n      \"date\": \"2024-01-20\",\n      \"start_time\": \"09:30:00\",\n      \"end_time\": \"10:30:00\",\n      \"status\": \"AVAILABLE\"\n    }\n  ],\n  \"updated_by\": 1,\n  \"updated_by_role\": \"GIVER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/v1/schedules",
              "host": ["{{base_url}}"],
              "path": ["api", "schedules"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message contains overlap information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include(\"重複或重疊\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ]
}
